<launch>
<arg name="model" default="burger" doc="model type [burger, waffle, waffle_pi]"/>
<arg name="robot_x_pos" default="-2.6"/>
<arg name="robot_y_pos" default="-12.01"/>
<arg name="robot_z_pos" default="0.35"/>
<arg name="robot_yaw"   default="1.57"/>
<arg name="base_frame" default="base_footprint"/>
<arg name="odom_frame" default="odom"/>
<arg name="map_frame"  default="map"/>
<arg name="move_forward_only" default="false"/>
<arg name="cmd_vel_topic" default="/cmd_vel"/>
<arg name="odom_topic" default="/odom"/>
<arg name="map_topic" default="/map"/>
<arg name="source_location_x" default="-2.0" />
<arg name="source_location_y" default="-2.5" />
<arg name="source_location_z" default="0.6" />
<arg name="find_source_threshold" default="0.5" />
<arg name="iter_rate" default="1" />
<arg name="max_iter" default="360" />
<arg name="visual" default="True" />

<!-- GADEN Player -->
<include file="/home/wang/disk1/sls1/gaden/House14/House14_1_3_04_KI/player.launch" />

<!-- Gazebo -->
<include file="$(find gazebo_ros)/launch/empty_world.launch">
<arg name="world_name" value="$(find eesa)/params/gazebo/world/House14.world"/>
<arg name="paused" value="false"/>
<arg name="use_sim_time" value="true"/>
<arg name="gui" value="$(arg visual)"/>
<arg name="headless" value="false"/>
<arg name="debug" value="false"/>
</include>

<!-- robot state publisher -->
<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" output="screen">
<param name="publish_frequency" type="double" value="50.0" />
</node>

<!-- spawn urdf -->
<param name="robot_description" command="$(find xacro)/xacro --inorder $(find eesa)/params/gazebo/urdf/robot.tb3b.urdf.xacro" />
<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-urdf -model $(arg model) -x $(arg robot_x_pos) -y $(arg robot_y_pos) -z $(arg robot_z_pos) -Y $(arg robot_yaw) -param robot_description" />

<!-- gas_sensor -->
<node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="fake_mox" output="screen">
<param name="/sensor_model" value="0" />
<param name="/sensor_frame" value="/my_robot_pos" />
<param name="/fixed_frame" value="map"/>
<param name="odom_topic_name" value="/global_odom" />
<param name="offset_x" value="0.0" />
<param name="offset_y" value="0.0" />
<param name="offset_z" value="0.3" />
</node>

<!-- anemometer -->
<node pkg="simulated_anemometer" type="simulated_anemometer" name="fake_anemometer" output="screen">	        
<param name="/sensor_frame" value="/my_robot_pos" />
<param name="/fixed_frame" value="map"/>
<param name="odom_topic_name" value="/global_odom" />
<param name="offset_x" value="0.0" />
<param name="offset_y" value="0.0" />
<param name="offset_z" value="0.3" />
</node>

<!-- Gmapping -->
<node pkg="gmapping" type="slam_gmapping" name="turtlebot3_slam_gmapping" output="log">
<remap from="/scan" to="/scan_filtered"/>
<param name="base_frame" value="$(arg base_frame)"/>
<param name="odom_frame" value="$(arg odom_frame)"/>
<param name="map_frame"  value="$(arg map_frame)"/>
<rosparam command="load" file="$(find eesa)/params/gazebo/config/gmapping_params.yaml" />
</node>

<!-- laser_filters -->
<node pkg="laser_filters" type="scan_to_scan_filter_chain" output="screen" name="laser_filter">
<rosparam command="load" file="$(find eesa)/params/gazebo/config/laser_filters_params.yaml" />
</node>

<!-- move_base -->
<node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
<param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
<rosparam file="$(find eesa)/params/move_base/costmap_common_params_$(arg model).yaml" command="load" ns="global_costmap" />
<rosparam file="$(find eesa)/params/move_base/costmap_common_params_$(arg model).yaml" command="load" ns="local_costmap" />
<rosparam file="$(find eesa)/params/move_base/local_costmap_params.yaml" command="load" />
<rosparam file="$(find eesa)/params/move_base/global_costmap_params.yaml" command="load" />
<rosparam file="$(find eesa)/params/move_base/move_base_params.yaml" command="load" />
<rosparam file="$(find eesa)/params/move_base/dwa_local_planner_params_$(arg model).yaml" command="load" />
<remap from="cmd_vel" to="$(arg cmd_vel_topic)"/>
<remap from="odom" to="$(arg odom_topic)"/>
<param name="DWAPlannerROS/min_vel_x" value="0.0" if="$(arg move_forward_only)" />
<param name="DWAPlannerROS/forward_point_distance" value="0.1" />
</node>

<!-- find source -->
<node name="main" pkg="eesa" type="main.py" output="screen" required="true">
<param name="map_topic" value="$(arg map_topic)" />
<param name="robot_frame" value="$(arg base_frame)" />
<param name="robot_real_pose_topic" value="/global_odom" />
<param name="anemometer_topic" value="/WindSensor_reading" />
<param name="anemometer_speed_th" value="0.2" />
<param name="gas_sensor_topic" value="/Sensor_reading" />
<param name="gas_sensor_hit_th" value="62500.0" />
<param name="sensor_window" value="4" />
<param name="source_x" value="$(arg source_location_x)" />
<param name="source_y" value="$(arg source_location_y)" />
<param name="find_source_th" value="$(arg find_source_threshold)" />
<param name="iter_rate" value="$(arg iter_rate)" />
<param name="max_iter" value="$(arg max_iter)" />
<param name="data_path" value="/home/wang/sim_results/House14_1_3_04_KI" />
<param name="rrt_max_iter" value="200" />
<param name="rrt_max_r" value="3.0" />
<param name="rrt_min_r" value="0.5" />
<param name="reach_waypoint_dis_th" value="0.4" />
<param name="sigma" value="0.8" />
<param name="beta" value="0.7" />
<param name="obs_r" value="0.2" />
<param name="visual" value="True" />
</node>

<!-- rviz -->
<node name="rviz" pkg="rviz" type="rviz" args="-d $(find eesa)/params/aaa.rviz"  if="$(arg visual)" />

</launch>